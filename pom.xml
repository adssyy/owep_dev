<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <!-- 定义本项目中顶级模块的坐标系 -->
    <groupId>com.kclm</groupId>
    <artifactId>owep-vue</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>owep</name>
    <!-- 此处的packaging一定要设为 pom -->
    <packaging>pom</packaging>
    <description>Online Wisdom Education Platform for short is: owep</description>

    <properties>
        <!-- 指定编译的JDK版本为11 -->
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.source>11</maven.compiler.source>
        <!-- 指定maven项目源码的编码格式为UTF-8， 同时报告输出编码格式也为utf-8 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 自定义版本属性 -->
        <mapstruct.version>1.4.2.Final</mapstruct.version>
        <spring-boot-dependencies.version>2.3.12.RELEASE</spring-boot-dependencies.version>
        <fastjson.version>1.2.73</fastjson.version>
        <lombok.version>1.18.12</lombok.version>
        <mysql.version>8.0.32</mysql.version>
        <mybatis-spring-boot-starter.version>2.2.2</mybatis-spring-boot-starter.version>
        <pagehelper-spring-boot-starter.version>1.2.12</pagehelper-spring-boot-starter.version>
        <commons-fileupload.version>1.4</commons-fileupload.version>
        <commons-net.version>3.6</commons-net.version>
        <commons-pool2.version>2.7.0</commons-pool2.version>
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <commons-io.version>2.4</commons-io.version>
        <poi.version>4.1.2</poi.version>
        <itextpdf.version>5.5.13</itextpdf.version>
        <commons-collections4.version>4.1</commons-collections4.version>
        <javax-mail.version>1.6.2</javax-mail.version>
        <hutool-all.version>5.3.2</hutool-all.version>
        <javax.servlet-api.version>3.1.0</javax.servlet-api.version>
        <easyexcel.version>3.1.3</easyexcel.version>
    </properties>

    <!-- 多模块构建项目 -->
    <modules>
        <!-- 实体类，主要用于持久层与DB的数据交换 -->
        <module>owep-admin-entity</module>
        <!-- 控制层，采用spring boot构建,含视图和控制层 -->
        <module>owep-admin-web-controller</module>
        <!-- VO,值对象，做为控制层向视图层传递数据的载体 -->
        <module>owep-admin-web-vo</module>
        <!-- 持久层，主要用于操作底层的DB -->
        <module>owep-admin-web-dao</module>
        <!-- DTO,数据传输对象，做为业务层向控制层传递数据的载体 -->
        <module>owep-admin-web-dto</module>

        <!-- 业务层 -->
        <module>owep-admin-web-service</module>

        <!-- 工具层，意在提供各种工具类 -->
        <module>owep-admin-utils</module>
    </modules>

    <dependencies>
        <!-- 统一加单元测试的依赖,在父模块中定义，所有子模块自动继承 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <!-- 如果要排除junit4测试模块，则加入如下 排除配置 -->
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <!-- 在项目的父模块中统一定义依赖的版本，这样一来，子模块中就可以按需导入依赖即可，无需再考虑 version 了 -->
    <dependencyManagement>
        <dependencies>
            <!-- spring-boot-parent也是继承于此依赖的，我们直接把此依整中的dependencyManagement通过 import scope给继承过来,这样我们在子模块中引入spring-boot的官方依赖时，就无需指定版本了 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <!-- 这里必需是pom -->
                <type>pom</type>
                <!-- 这里必需是 import, runtime, test, provided -->
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <dependency>
                <groupId>org.mapstruct</groupId>
                <!-- jdk8以下就使用mapstruct-jdk8 -->
                <!--suppress MybatisMapperXmlInspection -->
                <artifactId>mapstruct-jdk8</artifactId>
                <!--suppress MybatisMapperXmlInspection -->
                <version>${mapstruct.version}</version>
            </dependency>

            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct-processor</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <optional>true</optional>
            </dependency>

            <!-- mysql驱动 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
                <scope>runtime</scope>
            </dependency>

            <!-- mybatis整合 -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis-spring-boot-starter.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper-spring-boot-starter.version}</version>
            </dependency>

            <!-- 文件上传 -->
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons-fileupload.version}</version>
            </dependency>

            <dependency>
                <groupId>commons-net</groupId>
                <artifactId>commons-net</artifactId>
                <version>${commons-net.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-pool2</artifactId>
                <version>${commons-pool2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons-collections4.version}</version>
            </dependency>

            <!--javamail-->
            <!-- https://mvnrepository.com/artifact/javax.mail/javax.mail-api -->
            <dependency>
                <groupId>javax.mail</groupId>
                <artifactId>javax.mail-api</artifactId>
                <version>${javax-mail.version}</version>
            </dependency>

            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool-all.version}</version>
            </dependency>

            <!-- apache poi -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <!-- poi-ooxml -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>

            <dependency>
                <groupId>com.itextpdf</groupId>
                <artifactId>itextpdf</artifactId>
                <version>${itextpdf.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax.servlet-api.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>easyexcel</artifactId>
                <version>${easyexcel.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!-- 此构建插件 默认除了包含了 maven-surefire-plugin 的功能外，还会在构建时打包 Spring Boot 应用程序（JAR 或 WAR）并生成一个可执行的 JAR 文件。
            该 JAR 文件用于独立运行 Spring Boot 应用程序。 -->
            <!--
             有关 maven-surefire-plugin插件的功能如下：
             maven-surefire-plugin 是一个 Maven 插件，用于运行项目中的单元测试。该插件可以将单元测试与构建过程集成在一起，
             自动发现和执行项目中的单元测试，并在构建结束后生成单元测试报告。
             使用 maven-surefire-plugin 插件的好处是，可以自动运行所编写的单元测试，而不需要手动运行它们。
             同时，这也可以确保项目的质量和稳定性，在每次构建过程中都执行单元测试，确保代码质量和稳定性。
             另外，该插件还支持多种测试框架（如 Junit、TestNG 等）。
             在 Maven 构建过程中，maven-surefire-plugin 会默认执行名字以 "Test" 结尾的类中的所有测试方法。默认情况下，
             它会发现 src/test/java 目录下所有的测试类。可以通过配置 <includes> 和 <excludes> 标签来控制 maven-surefire-plugin 执行测试用例的范围。
             -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <configuration>
                    <!-- 插件的配置 -->
                </configuration>
            </plugin>

            <!-- 编译插件：此插件在spring boot项目中也已经默认被包含，如果你要指定JDK的版本，则可以做如下配置 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                    <excludes>
                        <!-- 在此可以指定一些不需要被编译的类型 -->
                    </excludes>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
